{"version":3,"file":"inputText.component-213cf9d9.js","sources":["../../../react-formio/src/utils/callLast.ts","../../../react-formio/src/components/input-text/inputText.component.tsx"],"sourcesContent":["export function callLast(fn: Function, time: number) {\n  let last: any = null;\n\n  return (...args: any[]) => {\n    if (last) {\n      clearTimeout(last);\n      last = null;\n    }\n\n    last = setTimeout(() => fn(...args), time);\n  };\n}\n","import classnames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useMemo, useState } from \"react\";\n\nimport { callLast } from \"../../utils/callLast\";\nimport { getEventValue } from \"../../utils/getEventValue\";\nimport { FormControl, FormControlProps } from \"../form-control/formControl.component\";\n\nexport interface InputTextProps<T = any> extends FormControlProps {\n  type?: string;\n  value?: T;\n  /**\n   * The input size\n   */\n  size?: string;\n  onChange?: (name: string, value: T) => void;\n  placeholder?: string;\n\n  [key: string]: any;\n}\n\nexport function InputText<T = any>({\n  name,\n  value,\n  label,\n  onChange,\n  required,\n  size,\n  type,\n  prefix,\n  suffix,\n  description,\n  className,\n  placeholder,\n  ...props\n}: InputTextProps<T>) {\n  const [localValue, setValue] = useState(value);\n\n  const change = useMemo(() => onChange && callLast(onChange, 300), [onChange]);\n\n  useEffect(() => {\n    setValue(value);\n  }, [value]);\n\n  return (\n    <FormControl\n      name={name}\n      label={label}\n      required={required}\n      description={description}\n      prefix={prefix}\n      suffix={suffix}\n      className={className}\n    >\n      <input\n        type={type || \"text\"}\n        {...props}\n        data-testid={`input_${name}`}\n        className={classnames(\"form-control\", size && `form-control-${size}`)}\n        id={name}\n        required={required}\n        value={(localValue || \"\") as any}\n        placeholder={placeholder}\n        onChange={(event) => {\n          const value = getEventValue(event);\n          setValue(value);\n\n          return change && change(name, value);\n        }}\n      />\n    </FormControl>\n  );\n}\n\nInputText.propTypes = {\n  label: PropTypes.string,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.any,\n  size: PropTypes.string,\n  required: PropTypes.bool,\n  onChange: PropTypes.func,\n  prefix: PropTypes.any,\n  suffix: PropTypes.any\n};\n"],"names":["callLast","fn","time","last","args","InputText","name","value","label","onChange","required","size","type","prefix","suffix","description","className","placeholder","props","localValue","setValue","useState","change","useMemo","useEffect","jsx","FormControl","classnames","event","getEventValue","PropTypes"],"mappings":"8QAAgB,SAAAA,EAASC,EAAcC,EAAc,CACnD,IAAIC,EAAY,KAEhB,MAAO,IAAIC,IAAgB,CACrBD,IACF,aAAaA,CAAI,EACVA,EAAA,MAGTA,EAAO,WAAW,IAAMF,EAAG,GAAGG,CAAI,EAAGF,CAAI,CAAA,CAE7C,CCUO,SAASG,EAAmB,CACjC,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,SAAAC,EACA,KAAAC,EACA,KAAAC,EACA,OAAAC,EACA,OAAAC,EACA,YAAAC,EACA,UAAAC,EACA,YAAAC,EACA,GAAGC,CACL,EAAsB,CACpB,KAAM,CAACC,EAAYC,CAAQ,EAAIC,WAASd,CAAK,EAEvCe,EAASC,UAAQ,IAAMd,GAAYT,EAASS,EAAU,GAAG,EAAG,CAACA,CAAQ,CAAC,EAE5Ee,OAAAA,EAAAA,UAAU,IAAM,CACdJ,EAASb,CAAK,CAAA,EACb,CAACA,CAAK,CAAC,EAGRkB,EAACC,EAAA,CACC,KAAApB,EACA,MAAAE,EACA,SAAAE,EACA,YAAAK,EACA,OAAAF,EACA,OAAAC,EACA,UAAAE,EAEA,SAAAS,EAAC,QAAA,CACC,KAAMb,GAAQ,OACb,GAAGM,EACJ,cAAa,SAASZ,IACtB,UAAWqB,EAAW,eAAgBhB,GAAQ,gBAAgBA,GAAM,EACpE,GAAIL,EACJ,SAAAI,EACA,MAAQS,GAAc,GACtB,YAAAF,EACA,SAAWW,GAAU,CACbrB,MAAAA,EAAQsB,EAAcD,CAAK,EACjC,OAAAR,EAASb,CAAK,EAEPe,GAAUA,EAAOhB,EAAMC,CAAK,CACrC,CAAA,CACF,CAAA,CAAA,CAGN,CAEAF,EAAU,UAAY,CACpB,MAAOyB,EAAU,OACjB,KAAMA,EAAU,OAChB,KAAMA,EAAU,OAAO,WACvB,MAAOA,EAAU,IACjB,KAAMA,EAAU,OAChB,SAAUA,EAAU,KACpB,SAAUA,EAAU,KACpB,OAAQA,EAAU,IAClB,OAAQA,EAAU,GACpB"}