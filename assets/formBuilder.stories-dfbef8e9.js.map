{"version":3,"file":"formBuilder.stories-dfbef8e9.js","sources":["../../../react-formio/src/components/react-component/reactComponent.component.tsx"],"sourcesContent":["import { Components, ComponentSchema } from \"formiojs\";\nimport ReactDOM from \"react-dom\";\n\nimport { Submission } from \"../../interfaces/Submission\";\n\nexport class ReactComponent<Data = any> extends Components.components.field {\n  public reactInstance: any;\n  public shouldSetValue?: boolean;\n  private dataForSetting?: Data;\n\n  /**\n   * This is the first phase of component building where the component is instantiated.\n   *\n   * @param component - The component definition created from the settings form.\n   * @param options - Any options passed into the renderer.\n   * @param data - The submission data where this component's data exists.\n   */\n  // eslint-disable-next-line no-useless-constructor,import/no-anonymous-default-export\n  constructor(component: ComponentSchema, options: any, data: Submission<Data>) {\n    super(component, options, data);\n  }\n\n  get $reactNode() {\n    return (this.refs as any)[`react-${this.id}`];\n  }\n\n  /**\n   * This method is called any time the component needs to be rebuilt. It is most frequently used to listen to other\n   * components using the this.on() function.\n   */\n  init() {\n    return super.init();\n  }\n\n  /**\n   * This method is called before the component is going to be destroyed, which is when the component instance is\n   * destroyed. This is different from detach which is when the component instance still exists but the dom instance is\n   * removed.\n   */\n  destroy() {\n    return super.destroy();\n  }\n\n  /**\n   * The second phase of component building where the component is rendered as an HTML string.\n   *\n   * @returns {string} - The return is the full string of the component\n   */\n  render() {\n    // For react components, we simply render as a div which will become the react instance.\n    // By calling super.render(string) it will wrap the component with the needed wrappers to make it a full component.\n    return super.render(`<div ref=\"react-${this.id}\"></div>`);\n  }\n\n  /**\n   * The third phase of component building where the component has been attached to the DOM as 'element' and is ready\n   * to have its javascript events attached.\n   *\n   * @param element\n   * @returns {Promise<void>} - Return a promise that resolves when the attach is complete.\n   */\n  async attach(element: any) {\n    super.attach(element);\n\n    // The loadRefs function will find all dom elements that have the \"ref\" setting that match the object property.\n    // It can load a single element or multiple elements with the same ref.\n    this.loadRefs(element, {\n      [`react-${this.id}`]: \"single\"\n    });\n\n    // @ts-ignore\n    if (this.refs[`react-${this.id}`]) {\n      // @ts-ignore\n      this.reactInstance = this.attachReact(this.refs[`react-${this.id}`]);\n\n      if (this.shouldSetValue) {\n        this.setValue(this.dataForSetting);\n        this.updateValue(this.dataForSetting);\n      }\n    }\n  }\n\n  /**\n   * The fourth phase of component building where the component is being removed from the page. This could be a redraw\n   * or it is being removed from the form.\n   */\n  detach() {\n    // @ts-ignore\n    if (this.refs[`react-${this.id}`]) {\n      // @ts-ignore\n      this.detachReact(this.refs[`react-${this.id}`]);\n    }\n    super.detach();\n  }\n\n  /**\n   * Override this function to render a react component.\n   */\n  renderReact(): any {\n    return null;\n  }\n\n  /**\n   * Override this function to insert your custom component.\n   *\n   * @param element\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  attachReact(element?: any) {\n    // eslint-disable-next-line react/no-render-return-value\n    return ReactDOM.render(this.renderReact(), element);\n  }\n\n  /**\n   * Override this function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  detachReact(element?: any) {\n    if (element) {\n      ReactDOM.unmountComponentAtNode(element);\n    }\n  }\n\n  /**\n   * Something external has set a value and our component needs to be updated to reflect that. For example, loading a submission.\n   *\n   * @param value\n   * @param flags\n   */\n  setValue(value: any, flags?: any) {\n    if (this.reactInstance) {\n      this.reactInstance.setState({\n        value: value\n      });\n      this.shouldSetValue = false;\n    } else {\n      this.shouldSetValue = true;\n      this.dataForSetting = value;\n    }\n\n    return false;\n  }\n\n  /**\n   * The user has changed the value in the component and the value needs to be updated on the main submission object and other components notified of a change event.\n   *\n   * @param value\n   * @param flags\n   */\n  updateValue = (value?: Data, flags?: Record<string, any>) => {\n    flags = flags || {};\n\n    const newValue = value === undefined || value === null ? this.getValue() : value;\n\n    const changed = newValue !== undefined ? this.hasChanged(newValue, this.dataValue) : false;\n\n    this.dataValue = Array.isArray(newValue) ? [...newValue] : newValue;\n\n    this.updateOnChange(flags, changed);\n    return changed;\n  };\n\n  /**\n   * Get the current value of the component. Should return the value set in the react component.\n   *\n   * @returns {*}\n   */\n  getValue(): Data {\n    if (this.reactInstance) {\n      return this.reactInstance.state.value;\n    }\n    return this.defaultValue;\n  }\n\n  /**\n   * Override normal validation check to insert custom validation in react component.\n   *\n   * @param data\n   * @param dirty\n   * @param rowData\n   * @returns {boolean}\n   */\n  checkValidity(data: Data, dirty: boolean, rowData: any) {\n    const valid = super.checkValidity(data, dirty, rowData);\n\n    if (!valid) {\n      return false;\n    }\n\n    return this.validate(data, dirty, rowData);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  validate(data: Data, dirty: boolean, rowData: any) {\n    return true;\n  }\n}\n"],"names":["ReactComponent","Components","component","options","data","__publicField","value","flags","newValue","changed","element","ReactDOM","dirty","rowData"],"mappings":"qpCAKa,MAAAA,UAAmCC,EAAAA,WAAW,WAAW,KAAM,CAa1E,YAAYC,EAA4BC,EAAcC,EAAwB,CACtE,MAAAF,EAAWC,EAASC,CAAI,EAbzBC,EAAA,sBACAA,EAAA,uBACCA,EAAA,uBA6IRA,EAAA,mBAAc,CAACC,EAAcC,IAAgC,CAC3DA,EAAQA,GAAS,GAEjB,MAAMC,EAAkCF,GAAiB,KAAK,SAAa,EAErEG,EAAUD,IAAa,OAAY,KAAK,WAAWA,EAAU,KAAK,SAAS,EAAI,GAEhF,YAAA,UAAY,MAAM,QAAQA,CAAQ,EAAI,CAAC,GAAGA,CAAQ,EAAIA,EAEtD,KAAA,eAAeD,EAAOE,CAAO,EAC3BA,CAAA,EA3IT,CAEA,IAAI,YAAa,CACf,OAAQ,KAAK,KAAa,SAAS,KAAK,IAAI,CAC9C,CAMA,MAAO,CACL,OAAO,MAAM,MACf,CAOA,SAAU,CACR,OAAO,MAAM,SACf,CAOA,QAAS,CAGP,OAAO,MAAM,OAAO,mBAAmB,KAAK,YAAY,CAC1D,CASA,MAAM,OAAOC,EAAc,CACzB,MAAM,OAAOA,CAAO,EAIpB,KAAK,SAASA,EAAS,CACrB,CAAC,SAAS,KAAK,IAAI,EAAG,QAAA,CACvB,EAGG,KAAK,KAAK,SAAS,KAAK,IAAI,IAEzB,KAAA,cAAgB,KAAK,YAAY,KAAK,KAAK,SAAS,KAAK,IAAI,CAAC,EAE/D,KAAK,iBACF,KAAA,SAAS,KAAK,cAAc,EAC5B,KAAA,YAAY,KAAK,cAAc,GAG1C,CAMA,QAAS,CAEH,KAAK,KAAK,SAAS,KAAK,IAAI,GAE9B,KAAK,YAAY,KAAK,KAAK,SAAS,KAAK,IAAI,CAAC,EAEhD,MAAM,OAAO,CACf,CAKA,aAAmB,CACV,OAAA,IACT,CAQA,YAAYA,EAAe,CAEzB,OAAOC,EAAS,OAAO,KAAK,cAAeD,CAAO,CACpD,CAMA,YAAYA,EAAe,CACrBA,GACFC,EAAS,uBAAuBD,CAAO,CAE3C,CAQA,SAASJ,EAAYC,EAAa,CAChC,OAAI,KAAK,eACP,KAAK,cAAc,SAAS,CAC1B,MAAAD,CAAA,CACD,EACD,KAAK,eAAiB,KAEtB,KAAK,eAAiB,GACtB,KAAK,eAAiBA,GAGjB,EACT,CA0BA,UAAiB,CACf,OAAI,KAAK,cACA,KAAK,cAAc,MAAM,MAE3B,KAAK,YACd,CAUA,cAAcF,EAAYQ,EAAgBC,EAAc,CAGtD,OAFc,MAAM,cAAcT,EAAMQ,EAAOC,CAAO,EAM/C,KAAK,SAAST,EAAMQ,EAAOC,CAAO,EAHhC,EAIX,CAGA,SAAST,EAAYQ,EAAgBC,EAAc}